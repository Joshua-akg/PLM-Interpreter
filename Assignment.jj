options{
    STATIC = false;
}

PARSER_BEGIN(Assignment)

public class Assignment{

  public static void main(String args []) throws Exception {
    try {
      Assignment parser = new Assignment(System.in);
      parser.Start(System.out);
    } catch (Exception e) {
      System.out.println("You've had an error "+e.getMessage());
    }
  }
  // int final = 0;
}

PARSER_END(Assignment)

//Lexical Specification

//Space
TOKEN: { < SPACE: " " >}
//End of line tokens
TOKEN: { < EOL: "\n" | "\r" | "\r\n" >}
//End of file
// TOKEN: { <EOF: "\0">}
//Arithmetic operators
TOKEN: { < ADD: "+" > | < MUL: "*" > }
//Parenthesis
TOKEN: { < LPAREN: "(" > | < RPAREN: ")" > }
//Curly braces
TOKEN: { < LBRACE: "{" > | < RBRACE: "}" > }
//Semi-colon
TOKEN: { < SCOLON: ";" > }
//Function definition - reserved word
TOKEN: { < DEF: "DEF" > }
//Main function - reserved word
// TOKEN: { < MAIN: "MAIN" > }
//Function names
TOKEN: { < MAIN: "MAIN" > | < FUNC: (["A"-"Z"])+ > }
//Parameter names
TOKEN: { < PARAM: (["a"-"z"])+ > }
//Numeric literals
TOKEN: { < NUM: (["0"-"9"])+ > }

//Function definition : 
// DEF <function-name> <parameter-name> <left-brace> <function body> <right-brace> <semicolon>

//print result of program
void Program(PrintStream printStream) throws NumberFormatException:
{} //local variabls
{
  (Function())*
  {
    printStream.println(Main());
  }
  (Function())*
  <EOF>
}

//main function
int Main() throws NumberFormatException:
{int result;}
{
  <DEF><SPACE><MAIN><SPACE><LBRACE><SPACE> 
  {
    result = Expression()
  }
  <SPACE><RBRACE><SPACE><SCOLON> <EOL>
  {return result;}
}

void Function() throws NumberFormatException:
{int result;}
{
  <DEF><SPACE><FUNC><SPACE><PARAM><SPACE><LBRACE><SPACE>
  {
    result = Expression()
  }
  <SPACE><RBRACE><SPACE><SCOLON> <EOL>
  {return result;}
}

//function body

int Expression(): {int result,x;}
//returns the result of an expression where the expression is a sum of terms
{
  result = Term() (<ADD> x = Term() {returm result += x;})* {return result;} 
}

int Term(): {int result,x;}
//returns the result of a term where the term is a product of factors
{
  result = Factor() (<MUL> x = Factor() {return result *= x;})* {return result;}
}

int Factor(): {int result; Token n;}
//returns the result of a factor where the factor is a number or a function call
{
  n = <NUM> {return Integer.parseInt(n.image);}
  |
  <FUNC> <LPAREN> {result=Expression()} <RPAREN> {return result;}
}