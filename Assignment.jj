options{
  lookahead = 2;
  STATIC = false;
}

PARSER_BEGIN(Assignment)
  public class Assignment{
    public static ArrayList<String> functionCalls = new ArrayList<String>();
    public static ArrayList<String> functionNames = new ArrayList<String>();

    public static void main(String args []) throws Exception {
      try {
        new Assignment(System.in).Program();
        System.out.println("Syntax is okay: PASS");
      } catch (Exception e) {
        System.out.println("Syntax failure HERE: " + e.getMessage());
      }     
    }
  }

PARSER_END(Assignment)

//Lexical Specification

//Space
TOKEN: { < SPACE: " " > }
//End of line tokens
TOKEN: { < EOL: "\n" | "\r" | "\r\n" > }
//End of file
// TOKEN: { <EOF: "\0">}
//Arithmetic operators
TOKEN: { < ADD: "+" > | < MUL: "*" > }
//Parenthesis
TOKEN: { < LPAREN: "(" > | < RPAREN: ")" > }
//Curly braces
TOKEN: { < LBRACE: "{" > | < RBRACE: "}" > }
//Semi-colon
TOKEN: { < SCOLON: ";" > }
//Function definition - reserved word
TOKEN: { < DEF: "DEF" > }
//Main function - reserved word
// TOKEN: { < MAIN: "MAIN" > }
//Function names
TOKEN: { < MAIN: "MAIN" > | < FUNC: (["A"-"Z"])+ > }
//Parameter names
TOKEN: { < PARAM: (["a"-"z"])+ > }
//Numeric literals
TOKEN: { < NUM: (["0"-"9"])+ > }
//Begining of a function definition
//Use of define to eliminate need of lookahead
TOKEN: { < DEFINE: <DEF> <SPACE> > }

//Lexical Specification

//(1) - [CORRECT]   //(2) - [CORRECT]   //(3) - [CORRECT]
//(4) - [CORRECT]   //(5) - [CORRECT]   //(6) - [CORRECT]
//(7) - [INCORRECT] //(8) - [INCORRECT]   //(9) - [CORRECT]
//(10) - [CORRECT]  //(11) - [INCORRECT]  //(12) - [CORRECT]

//TODO: (7) - Make sure associated parameters are used in function bodies # hashmap
//TODO: (8) - Make sure function calls refer to defined functions in the same file #
//TODO: (11) - Make sure functions can only be defined once in the same file

//Program consists of one main function and a series of function definitions in any order
//Program -> Function* Main Function*
void Program(): {} {
  (<DEFINE> Function())* 
  
  <DEFINE>
  try {
    Main()
  } catch (ParseException e) { //Catch error thrown for missing main function
    int lineNumber = 0;
    System.err.println(lineNumber);
    System.err.println("Missing Main Function");
    System.exit(0);
  }

  (<DEFINE> Function())*
  
  <EOF>  
}

//Main -> MAIN FunctionBody
void Main(): {} {
  <MAIN> <SPACE> FunctionBody()
}

//Function -> FUNC PARAM FunctionBody
void Function(): {} {
  try {
    <FUNC> <SPACE> <PARAM> <SPACE> FunctionBody()
  } catch (ParseException e) { //Catch error thrown for missing function name
    int lineNumber = e.getMessage().indexOf("line") + 5;
    System.err.println(e.getMessage().substring(lineNumber,lineNumber+1));

    System.err.println("Incorrect Function Format");
    System.exit(0);
  }
}

//FunctionBody -> LBRACE EXPR RBRACE SCOLON EOL
void FunctionBody(): {} {
  <LBRACE> <SPACE> 
  
  try {
    Expression()
  } catch (ParseException e) { //Catch error thrown for wrong expression
    int lineNumber = e.getMessage().indexOf("line") + 5;
    System.err.println(e.getMessage().substring(lineNumber,lineNumber+1));

    System.err.println("Incorrect Expression Format");
    System.exit(0);}  
  
  <SPACE> <RBRACE> <SPACE> <SCOLON> 
  
  try {
    <EOL>
  } catch (ParseException e) { //Catch error thrown for wrong line terminator
    int lineNumber = e.getMessage().indexOf("line") + 5;

    System.err.println(e.getMessage().substring(lineNumber,lineNumber+1));
    System.err.println("Invalid line terminator");

    System.exit(0);
  }
}

//Function_Call -> FUNC LPAREN EXPR RPAREN
void Function_Call(): {} {
  <FUNC> <LPAREN> Expression() <RPAREN>
}

//EXPR -> TERM ADD TERM | TERM
void Expression(): {} {
  Term() ( <ADD> Term() )*
}

//TERM -> FACTOR MUL FACTOR | FACTOR
void Term(): {} {
  Factor() ( <MUL> Factor() )*
}

//FACTOR -> NUM | Function | Parameter
//add check to make sure function calls refer to defined functions in the same file
void Factor(): {} {
  Function_Call() | <PARAM> | <NUM>
}