options{
  lookahead = 2;
  STATIC = false;
}

PARSER_BEGIN(Assignment)
  import java.util.*;
  public class Assignment{
    public static ArrayList<String> functionCalls = new ArrayList<String>();
    public static ArrayList<String> functionNames = new ArrayList<String>();

    //Maps function names to their parameters
    public static HashMap<String, Character> functionParams = new HashMap<String, Character>();

    public static void main(String args []) throws Exception {
      try {
        new Assignment(System.in).Program();
        System.out.println("Syntax is okay: PASS");
      } catch (Exception e) {
        System.out.println("Syntax error detected: FAIL");
        System.err.println(e.getMessage());
        // e.printStackTrace();
      }     
    }
  }
PARSER_END(Assignment)

//Lexical Specification

//Space
TOKEN: { < SPACE: " " > }
//End of line tokens
TOKEN: { < EOL: "\n" | "\r" | "\r\n" > }
//End of file
// TOKEN: { <EOF: "\0">}
//Arithmetic operators
TOKEN: { < ADD: "+" > | < MUL: "*" > }
//Parenthesis
TOKEN: { < LPAREN: "(" > | < RPAREN: ")" > }
//Curly braces
TOKEN: { < LBRACE: "{" > | < RBRACE: "}" > }
//Semi-colon
TOKEN: { < SCOLON: ";" > }
//Function definition - reserved word
TOKEN: { < DEF: "DEF" > }
//Main function - reserved word
// TOKEN: { < MAIN: "MAIN" > }
//Function names
TOKEN: { < MAIN: "MAIN" > | < FUNC: (["A"-"Z"])+ > }
//Parameter names
TOKEN: { < PARAM: (["a"-"z"])+ > }
//Numeric literals
TOKEN: { < NUM: (["0"-"9"])+ > }
//Begining of a function definition
//Use of define to eliminate need of lookahead
TOKEN: { < DEFINE: <DEF> <SPACE> > }

//Lexical Specification

void Definition(): {} {
  try {
    <DEFINE>
  } catch (ParseException e) { //Catch error thrown for wrong expression
    //extract line number from Exception
    String temp = e.getMessage().substring(
      e.getMessage().indexOf("line")+5, e.getMessage().indexOf(",")
    );
    int lineNumber = Integer.parseInt(temp);

    //throw new excpetion with a custom message
    throw new ParseException(lineNumber+"\nEach Function must start with (DEF)");
  }
}

//(1) - [CORRECT]   //(2) - [CORRECT]   //(3) - [CORRECT]
//(4) - [CORRECT]   //(5) - [CORRECT]   //(6) - [CORRECT]
//(7) - [INCORRECT] //(8) - [INCORRECT]   //(9) - [CORRECT]
//(10) - [CORRECT]  //(11) - [CORRECT]  //(12) - [CORRECT]

//TODO: (7) - Make sure associated parameters are used in function bodies # hashmap
//TODO: (8) - Make sure function calls refer to defined functions in the same file #

//Program consists of one main function and a series of function definitions in any order
//Program -> Function* Main Function*
void Program(): {Token t;} {
  (Definition() Function())* 
  
  Definition() Main()

  try {
    (Definition() Function())* 
    <EOF>

    {
    //check if the all functionCalls are in the functionNames list
      for (String call : Assignment.functionCalls) {
        if (!Assignment.functionNames.contains(call.substring(call.indexOf(" ")))) {
          String lineNumber = call.substring(0, call.indexOf(" "));
          throw new ParseException(lineNumber+"\nWrong call to an undefined function");
        }
      }
    }

  } catch (ParseException e) { //Catch error thrown for duplicate main
    if (e.getMessage().contains("Wrong"))
      throw e;

    //get current line number
    String temp = e.getMessage().substring(
      e.getMessage().indexOf("line")+5, e.getMessage().indexOf(",")
    );
    int lineNumber = Integer.parseInt(temp);

    if (e.getMessage().contains("MAIN")) {
      throw new ParseException(lineNumber+"\nDuplicate Main Function");
    }
    throw new ParseException(lineNumber+"\nWrong Function Format"); 
  }
}

//Main -> MAIN FunctionBody
void Main(): {} {
  try {
    <MAIN>
  } catch (ParseException e) { //Catch error thrown for missing main function
    //get current line number
    String temp = e.getMessage().substring(
      e.getMessage().indexOf("line")+5, e.getMessage().indexOf(",")
    );
    int lineNumber = Integer.parseInt(temp);
    if (e.getMessage().contains("DEF")) {
      throw new ParseException(lineNumber+"\nWrong Function Format");
    }

    lineNumber = 0;
    throw new ParseException(lineNumber+"\nMissing Main Function");
  }

  try {
    FunctionBody()
  } catch (ParseException e) { //Catch error thrown for incorrect main function Format
    if (e.getMessage().contains("Wrong"))
      throw e;

    //get current line number
    String temp = e.getMessage().substring(
      e.getMessage().indexOf("line")+5, e.getMessage().indexOf(",")
    );
    int lineNumber = Integer.parseInt(temp);
    throw new ParseException(lineNumber+"\nWrong Main Function Format"); 
  }
}

//Function -> FUNC PARAM FunctionBody
void Function():
{ String functionName = "";
  Token t;} 
{
  try {
    t = <FUNC> 
    { //Check if a function with the same name has already been defined
      functionName = t.image;
      if (functionNames.contains(functionName)) {
        throw new ParseException(t.beginLine+"\nWrong Function Definition" + functionName + " already defined");
      } else {
        functionNames.add(functionName);
      }
    } 
    <SPACE> <PARAM> FunctionBody()
  } catch (ParseException e) { 
    if (e.getMessage().contains("Wrong")) {
      throw e;
    }
    
    //Catch error thrown for missing function name
    //extract line number from Exception
    String temp = e.getMessage().substring(
      e.getMessage().indexOf("line")+5, e.getMessage().indexOf(",")
    );
    int lineNumber = Integer.parseInt(temp);

    //throw new excpetion with a custom message
    throw new ParseException(lineNumber+"\nWrong Function Format");
  }
}

//FunctionBody -> LBRACE EXPR RBRACE SCOLON EOL
void FunctionBody(): {} {
  <SPACE> <LBRACE> <SPACE> 
  
  try {
    Expression()
  } catch (ParseException e) { //Catch error thrown for wrong expression
    //extract line number from Exception

    if (e.getMessage().contains("Wrong"))
      throw e;

    String tem = e.getMessage().substring(
      e.getMessage().indexOf("line")+5, e.getMessage().indexOf(",")
    );
    int lineNumber = Integer.parseInt(tem);

    throw new ParseException(lineNumber+"Wrong Expression Format");
  }  
  <SPACE> <RBRACE> <SPACE> <SCOLON> 

  try {
    <EOL>
  } catch (ParseException e) { //Catch error thrown for wrong line terminator
    if (e.getMessage().contains("Wrong"))
      throw e;

    String tem = e.getMessage().substring(
      e.getMessage().indexOf("line")+5, e.getMessage().indexOf(",")
    );
    
    int lineNumber = Integer.parseInt(tem);

    //throw new excpetion with a custom message
    throw new ParseException(lineNumber+"Invalid line terminator");
  }
}

//EXPR -> TERM ADD TERM | TERM
void Expression(): {} {
  try {
    Term() ( <ADD> Term() )*
  } catch (ParseException e) {
    if (e.getMessage().contains("Wrong")) {
      throw e;
    }

    //extract line number from Exception
    String temp = e.getMessage().substring(
      e.getMessage().indexOf("line")+5, e.getMessage().indexOf(",")
    );
    int lineNumber = Integer.parseInt(temp);

    //throw new excpetion with a custom message
    throw new ParseException(lineNumber+"\nWrong Expression Format");
  }
}

//TERM -> FACTOR MUL FACTOR | FACTOR
void Term(): {} {
  try {
    Factor() ( <MUL> Factor() )*
  } catch (ParseException e) {
    if (e.getMessage().contains("Wrong")) {
      throw e;
    }

    //extract line number from Exception
    String temp = e.getMessage().substring(
      e.getMessage().indexOf("line")+5, e.getMessage().indexOf(",")
    );
    int lineNumber = Integer.parseInt(temp);

    //throw new excpetion with a custom message
    throw new ParseException(lineNumber+"\nWrong Expression Format");
  }
}

//FACTOR -> NUM | Function | Parameter
//add check to make sure function calls refer to defined functions in the same file
void Factor(): {} {
  try {
    Function_Call() | <PARAM> | <NUM>
  } catch (ParseException e) {
    if (e.getMessage().contains("Wrong"))
      throw e;
    else {
      //extract line number from Exception
      String temp = e.getMessage().substring(
        e.getMessage().indexOf("line")+5, e.getMessage().indexOf(",")
      );
      int lineNumber = Integer.parseInt(temp);

      //throw new excpetion with a custom message
      throw new ParseException(lineNumber+"\nWrong Expression Format");
    }
  }
}

//Function_Call -> FUNC LPAREN EXPR RPAREN
void Function_Call():
{Token t;}
{
  try {
    t = <FUNC> 
    {
      //add to arraylist of function calls
      functionCalls.add(t.beginLine + " " + t.image);
    }
    <LPAREN> Expression() <RPAREN>
  } catch (ParseException e) { //catch error thrown for incorrect function call Format
    if (e.getMessage().contains("Wrong")) {
      throw e;
    }
    
    //extract line number from Exception
    String temp = e.getMessage().substring(
      e.getMessage().indexOf("line")+5, e.getMessage().indexOf(",")
    );
    int lineNumber = Integer.parseInt(temp);

    //throw new excpetion with a custom message
    throw new ParseException(lineNumber+"\nWrong Function Call Format");
  }
}