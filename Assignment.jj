options{
  lookahead = 2;
  STATIC = false;
}

PARSER_BEGIN(Assignment)
  import java.util.*;
  public class Assignment{
    public static ArrayList<String> functionCalls = new ArrayList<String>();
    public static ArrayList<String> functionNames = new ArrayList<String>();

    //Maps function names to their parameters
    public static HashMap<String, Character> functionParams = new HashMap<String, Character>();

    public static void main(String args []) throws Exception {
      try {
        new Assignment(System.in).Program();
        System.out.println("Syntax is okay: PASS");
      } catch (Exception e) {
        System.out.println("Syntax error detected: FAIL");
        System.err.println(e.getMessage());
      }     
    }
  }
PARSER_END(Assignment)

//Lexical Specification

//Space
TOKEN: { < SPACE: " " > }
//End of line tokens
TOKEN: { < EOL: "\n" | "\r" | "\r\n" > }
//End of file
// TOKEN: { <EOF: "\0">}
//Arithmetic operators
TOKEN: { < ADD: "+" > | < MUL: "*" > }
//Parenthesis
TOKEN: { < LPAREN: "(" > | < RPAREN: ")" > }
//Curly braces
TOKEN: { < LBRACE: "{" > | < RBRACE: "}" > }
//Semi-colon
TOKEN: { < SCOLON: ";" > }
//Function definition - reserved word
TOKEN: { < DEF: "DEF" > }
//Main function - reserved word
// TOKEN: { < MAIN: "MAIN" > }
//Function names
TOKEN: { < MAIN: "MAIN" > | < FUNC: (["A"-"Z"])+ > }
//Parameter names
TOKEN: { < PARAM: (["a"-"z"])+ > }
//Numeric literals
TOKEN: { < NUM: (["0"-"9"])+ > }
TOKEN: { < DEFINE: <DEF> <SPACE> > }

//Lexical Specification

//(1) - [CORRECT]   //(2) - [CORRECT]   //(3) - [CORRECT]
//(4) - [CORRECT]   //(5) - [CORRECT]   //(6) - [CORRECT]
//(7) - [INCORRECT] //(8) - [INCORRECT]   //(9) - [CORRECT]
//(10) - [CORRECT]  //(11) - [CORRECT]  //(12) - [CORRECT]

//TODO: (7) - Make sure associated parameters are used in function bodies # hashmap
//TODO: (8) - Make sure function calls refer to defined functions in the same file #

void Definition(): {} {
  try {
    <DEFINE>
  } catch (ParseException e) { //Catch error thrown for wrong beginning of line
    
  }
}

void Start(): {} {
  Program() <EOF>
  //{}
}

//Program -> (Function() | Main())*
void Program(): {} {
  (
    Definition() (Function() | Main())
  )* 
}

//Main -> MAIN FunctionBody
void Main(): {} {
  <MAIN> FunctionBody()
}

//Function -> FUNC PARAM FunctionBody
void Function():
{} 
{
  <FUNC> <SPACE> <PARAM> FunctionBody()
}

//FunctionBody -> LBRACE EXPR RBRACE SCOLON EOL
void FunctionBody(): {} {
  <SPACE> <LBRACE> <SPACE> Expression() <SPACE> <RBRACE> <SPACE> <SCOLON> <EOL>
}

//EXPR -> TERM ADD TERM | TERM
void Expression(): {} {
  Term() ( <ADD> Term() )*
}

//TERM -> FACTOR MUL FACTOR | FACTOR
void Term(): {} {
  Factor() ( <MUL> Factor() )*
}

//FACTOR -> NUM | Function | Parameter
void Factor(): {} {
  Function_Call() | <PARAM> | <NUM>
}

//Function_Call -> FUNC LPAREN EXPR RPAREN
void Function_Call():
{}
{
  <FUNC> <LPAREN> Expression() <RPAREN>
}