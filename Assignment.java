/* Generated By:JavaCC: Do not edit this line. Assignment.java */
  import java.util.*;
  public class Assignment implements AssignmentConstants {
    //Arraylist for function names and calls to make sure all calls are to functions in the program
    public static ArrayList<String> functionCalls = new ArrayList<String>();
    public static ArrayList<String> functionNames = new ArrayList<String>();

    //Stack of function calls to be used in cycle detection of call to functions
    public static Stack<FunctionCall> calls = new Stack<FunctionCall>();

    //create new stack for function parameters to make sure function bodies only used corresponding parameters
    public static Stack<String> functionParams = new Stack<String>();

    //Function map to store function names mapped to their details (parameter and body)
    public static HashMap<String, Function> functionDetails = new HashMap<String, Function>();

    public static void main(String args []) throws Throwable {
      try {
        Expression finalExpression = new Assignment(System.in).Program();

        //print the result of parsing the PLM
        System.out.println("PASS");

        //print the result of evaluating the PLM
        System.out.println(expressionEvaluator(finalExpression.toString()));
      } catch (Throwable e) {
        //catch errors thrown from programs which do not evaluate to a number
        if (e.getMessage().contains("Recursive"))
          System.out.println("DIVERGENCE");
        else {
          //print the result of parsing the PLM
          System.out.println("FAIL");

          //check if e is an error vs an exception, which would be thrown if a non-token is found
          if (e instanceof Error) {
            System.err.println(getLineNumber(e.getMessage())+"\nWrong character - Non-token found");
          } else
            //Otherwise print whatever exception was thrown by the parser
              System.err.println(e.getMessage());
        }
      }
    }

    //evaluator for the final expression
    public static int expressionEvaluator(String finalExpression) {
      //declare the numbers and operators expected in the expression
      String numbers = "0123456789";
      String op = "*+";

      //convert expression to a character array
      char[] characters = finalExpression.toCharArray();

      //declare a stack to store the numbers used in the evaluation
      Stack<Integer> intStack = new Stack<Integer>();

      //declare a last character to use in checking if numbers consist of multiple digits
      char last = ' ';

      //loop through all characters in the final expression
      for (char ch : characters) {
        //if the character is a number
        if (numbers.contains(ch+"")) {
          //check if the last character was also a number
          if (numbers.contains(last+"")) {
            //if it was then remove the last number from the stack and add the current number to it times 10
            intStack.push(10*(intStack.pop() + (ch - '0')));
          } else    //otherwise just add the current number to the stack
            intStack.push(ch - '0');

        //if the current character is an operator
        } else if (op.contains(ch+"")) {
          //pop the last two numbers from the stack and perform the operation
          int num1 = intStack.pop();
          int num2 = intStack.pop();
          int result;

          if (ch == '+') {
            result = num1 + num2;
            intStack.push(result);
          } else {
            result = num1 * num2;
            intStack.push(result);
          }
        }
        //set the last character to the current character just checked
        last = ch;
      }
      //return the final result on the stack
      return intStack.pop();
    }

    //function to retrieve line number from string message
    public static int getLineNumber(String exceptionMessage) {
      //find where the message says "line" and then get the number after it
      String temp = exceptionMessage.substring(exceptionMessage.indexOf("line")+5, exceptionMessage.indexOf(","));
      return Integer.parseInt(temp);
    }

    //create a class to represent functions
    public class Function {
      //functions consists of parameters and a body which is an expression
      public String param;
      public Expression body;

      //Function constructor
      public Function(String param, Expression body) {
        this.param = param;
        this.body = body;
      }

      //getters, return the function datails - not sure it's needed since it's public
      public String getParam() {
        return param;
      }

      public Expression getBody() {
        return body;
      }
    }

    //create a class to represent expressions
    //declare as abstract since expressions come in multiple types
    public abstract class Expression {}

    //create classes for the different types of expressions - numbers, parameters, functioncalls
    //class for numbers
    public class Number extends Expression {
      //declare the integer value of the number
      public int value;

      public Number(int value) {
        this.value = value;
      }

      //toString method for numbers - produces the string representation of a number
      public String toString() {
        return "" + value;
      }
    }

    //class for parameters
    public class Parameter extends Expression {
      //declare the parameter name
      public String param;

      //Parameter constructor
      public Parameter(String param) {
        this.param = param;
      }

      //toString method for parameters - produces the string representation of a parameter
      public String toString() {
        return param;
      }
    }

    //class for function calls
    public class FunctionCall extends Expression {
      //declare the function name and the argument expression of the function call
      public String functionName;
      public Expression argument;

      //FunctionCall constructor
      public FunctionCall(String name, Expression arg) {
        this.functionName = name;
        this.argument = arg;
      }

      //toString method for function calls - produces the string representation of a function call
      public String toString() {
        //search the call stack to see if a function call has already been made
        //meaning there would be a cycle and the expression produced does not evaluate to a number
        if (calls.search(this) > -1) {
          throw new Error("Wrong Recursive function call");
        }

        //if the function call is not in the call stack, add it to the stack
        calls.push(this);

        //get the string representation of the function body and parameter 
        String functionBody = functionDetails.get(functionName).getBody().toString();
        String functionParam = functionDetails.get(functionName).getParam();

        //replace the parameter in the function body with the argument
        String result = functionBody.replaceAll(functionParam, argument.toString());

        //after retrieving the expression which the function call produces
        //remove it from the stack
        //so it may be called again from other functions without creating a cycle
        calls.pop();

        //return the expression created by the function call
        return result;
      }
    }

    //class for binary expressions
    public class Binary extends Expression {
      //declare the expressions and the operator which a binary expression consists of
      public Expression left;
      public Expression right;
      public String operator;

      //Binary expression constructor
      public Binary(Expression left, String op, Expression right) {
        this.left = left; this.right = right;
        this.operator = op;
      }

      //Return the String form with left and right operands and operator
      public String toString() {
        //return the string representations of the left and right operands and operator
        //returned in this order (post-fix) to allow for post-fix evaluation
        return "(" + left.toString() + "|" + right.toString() + operator + ")";
      }
    }

  final public void Definition() throws ParseException, Exception {
    try {
      jj_consume_token(DEFINE);
    } catch (Exception e) {
                          //Catch error thrown for wrong expression
    if (e.getMessage().contains("EOF")) {
      {if (true) throw new Exception("0\nWrong Program Structure - Missing Main Function");}
    }

    //throw new excpetion with a custom message
    {if (true) throw new Exception(getLineNumber(e.getMessage())+"\nWrong Function Format - must start with (DEF)");}
    }
  }

//Program consists of one main function and a series of function definitions in any order
//Program -> Function* Main Function*
  final public Expression Program() throws ParseException, Exception {
                                        Token t; double result;
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      Function();
    }
    try {
      Main();
    } catch (Exception e) {
    if (e.getMessage().contains("Wrong"))
      {if (true) throw e;}

    {if (true) throw new Exception(getLineNumber(e.getMessage())+"\nWrong Program Structure - Missing Main Function");}
    }
    try {
      label_2:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_2;
        }
        Function();
      }
      jj_consume_token(0);
    //check if the all functionCalls are in the functionNames list
      for (String call : Assignment.functionCalls) {
        //if a function call is not in the functionNames list, throw an exception
        if (!Assignment.functionNames.contains(call.substring(call.indexOf(" ")+1))) {
          String lineNumber = call.substring(0, call.indexOf(" "));
          {if (true) throw new Exception(lineNumber+"\nWrong call to an undefined function");}
        }
      }
    } catch (Exception e) {
                          //Catch error thrown for duplicate main
    //if the message contains a "Wrong", propagate the exception
    if (e.getMessage().contains("Wrong"))
      {if (true) throw e;}

    if (e.getMessage().contains("MAIN")) {
      {if (true) throw new Exception(getLineNumber(e.getMessage())+"\nWrong Program Structure - Duplicate Main Function");}
    }

    {if (true) throw new Exception(getLineNumber(e.getMessage())+"\nWrong Function Naame Format");}
    }
   {if (true) return functionDetails.get("MAIN").getBody();}
    throw new Error("Missing return statement in function");
  }

//Main -> MAIN FunctionBody
  final public Expression Main() throws ParseException, Exception {
                                     Expression ex;
    Definition();
    try {
      jj_consume_token(MAIN);
      //add the function name "main" to the functionNames list
      Assignment.functionNames.add("MAIN");
    } catch (Exception e) {
                          //Catch possible exceptions that can be thrown
    if (e.getMessage().contains("DEF")) {
      {if (true) throw new Exception(getLineNumber(e.getMessage())+"\nWrong Format - Function cannot be called DEF");}
    }

    if (e.getMessage().contains("FUNC")) {
      {if (true) throw new Exception(getLineNumber(e.getMessage())+"\nWrong Function Name Format");}
    }

    //catch exception for missing main function
    {if (true) throw new Exception("0\nWrong Program Structure - Missing Main Function");}
    }
    try {
      //let the expression to be returned be the expression in the function body
          ex = FunctionBody();
      try {
        jj_consume_token(SCOLON);
        jj_consume_token(EOL);
      } catch (Exception e) {
                            //Catch possible exceptions that can be thrown
      //propagate other exceptions
      if (e.getMessage().contains("Wrong"))
        {if (true) throw e;}

      //Catch error thrown for wrong line terminator
      //throw new excpetion with a custom message
      {if (true) throw new Exception(getLineNumber(e.getMessage())+"\nWrong function terminator");}
      }
      //add the main function's details to the hashmap
      functionDetails.put("MAIN", new Function("",ex));
      {if (true) return ex;}
    } catch (Exception e) {
                          //Catch error thrown for incorrect main function Format
    if (e.getMessage().contains("Wrong"))
      {if (true) throw e;}

    {if (true) throw new Exception(getLineNumber(e.getMessage())+"\nWrong Main Function Format");}
    }
    throw new Error("Missing return statement in function");
  }

//Function -> FUNC PARAM FunctionBody
  final public Expression Function() throws ParseException, Exception {
                                         String functionName = ""; Token t; Token p; Expression ex;
    Definition();
    try {
      t = jj_consume_token(FUNC);
      //Check if a function with the same name has already been defined
      functionName = t.image;

      //if it has, throw a new exception as there's a duplicate function
      if (functionNames.contains(functionName)) {
        {if (true) throw new Exception(t.beginLine+"\nWrong Program Structure - '" + functionName + "' already defined");}
      } else {
        functionNames.add(functionName);
      }
      jj_consume_token(SPACE);
      p = jj_consume_token(PARAM);
     functionParams.push(p.image);
      //set the resulting expression to be the function body
          ex = FunctionBody();
      try {
        jj_consume_token(SCOLON);
        jj_consume_token(EOL);
      } catch (Exception e) {
      //propagrate thrown exception
      if (e.getMessage().contains("Wrong"))
        {if (true) throw e;}

      //Catch error thrown for wrong line terminator
      //throw new exception with a custom message
      {if (true) throw new Exception(getLineNumber(e.getMessage())+"\nWrong function terminator");}
      }
      //add the function's details to the hashmap
      functionDetails.put(functionName, new Function(p.image, ex));
      {if (true) return ex;}
    } catch (Exception e) {
                          //Catch error thrown for missing function name
    if (e.getMessage().contains("Wrong")) {
      {if (true) throw e;}
    }

    //throw message saying the parameter format is wrong
    if (e.getMessage().contains("PARAM"))
      {if (true) throw new Exception(getLineNumber(e.getMessage())+"\nWrong Parameter Format");}

    //throw new excpetion with a custom message
    {if (true) throw new Exception(getLineNumber(e.getMessage())+"\nWrong Function Name Format");}
    }
    throw new Error("Missing return statement in function");
  }

//FunctionBody -> LBRACE EXPR RBRACE SCOLON EOL
  final public Expression FunctionBody() throws ParseException, Exception {
                                             Expression ex;
    try {
      jj_consume_token(SPACE);
      jj_consume_token(LBRACE);
      jj_consume_token(SPACE);
      //set the resulting expression to that contained within the body
            ex = Expression();
      jj_consume_token(SPACE);
      jj_consume_token(RBRACE);
      jj_consume_token(SPACE);
     {if (true) return ex;}
    } catch (Exception e) {
    //propagate exception
    if (e.getMessage().contains("Wrong"))
      {if (true) throw e;}

    //catch exception for wrong function body format 
    {if (true) throw new Exception(getLineNumber(e.getMessage())+"\nWrong Function Body Format");}
    }
    throw new Error("Missing return statement in function");
  }

//split expressions into terms to preserve order of operations
//EXPR -> TERM ADD TERM | TERM    //after factorisation
  final public Expression Expression() throws ParseException, Exception {
                                           Expression left, right;
    try {
      left = Term();
      label_3:
      while (true) {
        if (jj_2_3(2)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(ADD);
        right = Term();
         left = new Binary(left, "+", right);
      }
     {if (true) return left;}
    } catch (Exception e) {
    if (e.getMessage().contains("Wrong")) {
      {if (true) throw e;}
    }

    //throw new exception with a custom message
    {if (true) throw new Exception(getLineNumber(e.getMessage())+"\nWrong Expression Format");}
    }
    throw new Error("Missing return statement in function");
  }

//TERM -> FACTOR MUL FACTOR | FACTOR
  final public Expression Term() throws ParseException, Exception {
                                     Expression left, right;
    try {
      left = Factor();
      label_4:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(MUL);
        right = Factor();
         left = new Binary(left, "*", right);
      }
     {if (true) return left;}
    } catch (Exception e) {
    //propagate exceptions thrown
    if (e.getMessage().contains("Wrong")) {
      {if (true) throw e;}
    }

    //throw new exception with a custom message
    {if (true) throw new Exception(getLineNumber(e.getMessage())+"\nWrong Expression Format");}
    }
    throw new Error("Missing return statement in function");
  }

//FACTOR -> NUM | Function | Parameter
//add check to make sure function calls refer to defined functions in the same file
  final public Expression Factor() throws ParseException, Exception {
                                       Token num; Expression exp; Token param;
    try {
      if (jj_2_5(2)) {
        //set expression to the function call
            exp = Function_Call();
     {if (true) return exp;}
      } else if (jj_2_6(2)) {
        param = jj_consume_token(PARAM);
        //check that the parameter is the last parameter added for a function
        //making sure that the parameter in the expression is the same one defined for the function 
        if (!(functionParams.peek().equals(param.image))) {
          {if (true) throw new Exception(param.beginLine+"\nWrong Parameter within function body");}
        }

        {if (true) return new Parameter(param.image);}
      } else if (jj_2_7(2)) {
        num = jj_consume_token(NUM);
       {if (true) return new Number(Integer.parseInt(num.image));}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Exception e) {
    if (e.getMessage().contains("Wrong"))
      {if (true) throw e;}
    else {
      //throw new excpetion with a custom message
      {if (true) throw new Exception(getLineNumber(e.getMessage())+"\nWrong Expression Format");}
    }
    }
    throw new Error("Missing return statement in function");
  }

//Function_Call -> FUNC LPAREN EXPR RPAREN
  final public Expression Function_Call() throws ParseException, Exception {
                                              Token name; Expression exp;
    try {
      name = jj_consume_token(FUNC);
        //add line number and function name to arraylist of function calls
        functionCalls.add(name.beginLine + " " + name.image);
      jj_consume_token(LPAREN);
      //set expression to the expression within the function call
            exp = Expression();
      jj_consume_token(RPAREN);
     {if (true) return new FunctionCall(name.image, exp);}
    } catch (Exception e) {
                          //catch error thrown for incorrect function call Format
    if (e.getMessage().contains("Wrong")) {
      {if (true) throw e;}
    }

    //throw new excpetion with a custom message
    {if (true) throw new Exception(getLineNumber(e.getMessage())+"\nWrong Function Call Format");}
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_3R_5() {
    if (jj_3R_9()) return true;
    if (jj_scan_token(FUNC)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(ADD)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(MUL)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(PARAM)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_scan_token(FUNC)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(DEFINE)) return true;
    return false;
  }

  private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    }
    return false;
  }

  /** Generated Token Manager. */
  public AssignmentTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[7];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Assignment(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Assignment(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AssignmentTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Assignment(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AssignmentTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Assignment(AssignmentTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AssignmentTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[18];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 18; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
