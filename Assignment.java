/* Generated By:JavaCC: Do not edit this line. Assignment.java */
  import java.util.*;
  public class Assignment implements AssignmentConstants {
    public static ArrayList<String> functionCalls = new ArrayList<String>();
    public static ArrayList<String> functionNames = new ArrayList<String>();

    //create new stack for function parameters
    public static Stack<String> functionParams = new Stack<String>();

    public static void main(String args []) throws Throwable {
      try {
        new Assignment(System.in).Program();
        System.out.println("Syntax is okay: PASS");
      } catch (Throwable e) {
        System.out.println("Syntax error detected: FAIL");

        //check if e is an instance of error
        if (e instanceof Error) {
          System.err.println(getLineNumber(e.getMessage())+"\nNon-Token character found");
        } else
            System.err.println(e.getMessage());
        // e.printStackTrace();
      }
    }

    //function to retrieve line number from string message
    public static int getLineNumber(String exceptionMessage) {
      String temp = exceptionMessage.substring(exceptionMessage.indexOf("line")+5, exceptionMessage.indexOf(","));
      return Integer.parseInt(temp);
    }

//Lexical Specification
  final public void Definition() throws ParseException, Exception {
    try {
      jj_consume_token(DEFINE);
    } catch (Exception e) {
                          //Catch error thrown for wrong expression
    // System.out.println(e.getMessage());
    if (e.getMessage().contains("EOF")) {
      {if (true) throw new Exception("0\nWrong Program Structure - Missing Main FUnction");}
    }

    //throw new excpetion with a custom message
    {if (true) throw new Exception(getLineNumber(e.getMessage())+"\nWrong Function Format - must start with (DEF)");}
    }
  }

//Program consists of one main function and a series of function definitions in any order
//Program -> Function* Main Function*
  final public void Program() throws ParseException, Exception {
                                  Token t;
    label_1:
    while (true) {
      if (jj_2_1(3)) {
        ;
      } else {
        break label_1;
      }
      Function();
    }
    try {
      Main();
    } catch (Exception e) {
    if (e.getMessage().contains("Wrong"))
      {if (true) throw e;}

    {if (true) throw new Exception(getLineNumber(e.getMessage())+"\nWrong Program Structure - Missing Main Function");}
    }
    try {
      label_2:
      while (true) {
        if (jj_2_2(3)) {
          ;
        } else {
          break label_2;
        }
        Function();
      }
      jj_consume_token(0);
    //check if the all functionCalls are in the functionNames list
      for (String call : Assignment.functionCalls) {
        if (!Assignment.functionNames.contains(call.substring(call.indexOf(" ")+1))) {
          String lineNumber = call.substring(0, call.indexOf(" "));
          {if (true) throw new Exception(lineNumber+"\nWrong call to an undefined function");}
        }
      }
    } catch (Exception e) {
                          //Catch error thrown for duplicate main
    if (e.getMessage().contains("Wrong"))
      {if (true) throw e;}

    //get current line number
    int lineNumber = getLineNumber(e.getMessage());

    if (e.getMessage().contains("MAIN")) {
      //wrong
      {if (true) throw new Exception(lineNumber+"\nWrong Program Structure - Duplicate Main Function");}
    }

    //print message
    System.out.println(e.getMessage());
    {if (true) throw new Exception(lineNumber+"\nWrong Function Format");}
    }
  }

//Main -> MAIN FunctionBody
  final public void Main() throws ParseException, Exception {
    Definition();
    try {
      jj_consume_token(MAIN);
      Assignment.functionNames.add("MAIN");
    } catch (Exception e) {
                          //Catch error thrown for missing main function

    //get current line number
    int lineNumber = getLineNumber(e.getMessage());
    if (e.getMessage().contains("DEF")) {
      {if (true) throw new Exception(lineNumber+"\nWrong Format - Function cannot be called DEF");}
    }

    if (e.getMessage().contains("FUNC")) {
      {if (true) throw new Exception(lineNumber+"\nWrong Function Name Format");}
    }

    lineNumber = 0;
    {if (true) throw new Exception(lineNumber+"\nWrong Program Structure - Missing Main Function");}
    }
    try {
      FunctionBody();
    } catch (Exception e) {
                          //Catch error thrown for incorrect main function Format
    if (e.getMessage().contains("Wrong"))
      {if (true) throw e;}

    //get current line number
    int lineNumber = getLineNumber(e.getMessage());
    {if (true) throw new Exception(lineNumber+"\nWrong Main Function Format");}
    }
  }

//Function -> FUNC PARAM FunctionBody
  final public void Function() throws ParseException, Exception {
                                   String functionName = ""; Token t; Token p;
    Definition();
    try {
      t = jj_consume_token(FUNC);
      //Check if a function with the same name has already been defined
      functionName = t.image;
      if (functionNames.contains(functionName)) {
        {if (true) throw new Exception(t.beginLine+"\nWrong Program Structure - '" + functionName + "' already defined");}
      } else {
        functionNames.add(functionName);
      }
      jj_consume_token(SPACE);
      p = jj_consume_token(PARAM);
     functionParams.push(p.image);
      FunctionBody();
    } catch (Exception e) {
                          //Catch error thrown for missing function name
    if (e.getMessage().contains("Wrong")) {
      {if (true) throw e;}
    }

    //extract line number from Exception
    int lineNumber = getLineNumber(e.getMessage());

    //throw message saying the parameter format is wrong
    if (e.getMessage().contains("PARAM"))
      {if (true) throw new Exception(lineNumber+"\nWrong Parameter Format");}

    //throw new excpetion with a custom message
    {if (true) throw new Exception(lineNumber+"\nWrong Function Name Format");}
    }
  }

//FunctionBody -> LBRACE EXPR RBRACE SCOLON EOL
  final public void FunctionBody() throws ParseException, Exception {
    try {
      jj_consume_token(SPACE);
      jj_consume_token(LBRACE);
      jj_consume_token(SPACE);
      Expression();
      jj_consume_token(SPACE);
      jj_consume_token(RBRACE);
      jj_consume_token(SPACE);
    } catch (Exception e) {
                          //Catch error thrown for wrong expression
    //extract line number from Exception

    if (e.getMessage().contains("Wrong"))
      {if (true) throw e;}

    int lineNumber = getLineNumber(e.getMessage());

    //throw new exception with custom message
    // if (e.getMessage().contains("PARAM"))
    // System.out.println(e.getMessage());
    //   throw new Exception(lineNumber+"\nWrong Parameter Foormat"); //what does this fix?

    {if (true) throw new Exception(lineNumber+"\nWrong Function Body Format");}
    }
    jj_consume_token(SCOLON);
    try {
      jj_consume_token(EOL);
    } catch (Exception e) {
                          //Catch error thrown for wrong line terminator
    if (e.getMessage().contains("Wrong"))
      {if (true) throw e;}

    int lineNumber = getLineNumber(e.getMessage());

    //throw new excpetion with a custom message
    {if (true) throw new Exception(lineNumber+"Invalid line terminator");}
    }
  }

//EXPR -> TERM ADD TERM | TERM
  final public void Expression() throws ParseException, Exception {
    try {
      Term();
      label_3:
      while (true) {
        if (jj_2_3(3)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(ADD);
        Term();
      }
    } catch (Exception e) {
    if (e.getMessage().contains("Wrong")) {
      {if (true) throw e;}
    }

    //extract line number from Exception
    int lineNumber = getLineNumber(e.getMessage());

    //throw new excpetion with a custom message
    {if (true) throw new Exception(lineNumber+"\nWrong Expression Format");}
    }
  }

//TERM -> FACTOR MUL FACTOR | FACTOR
  final public void Term() throws ParseException, Exception {
    try {
      Factor();
      label_4:
      while (true) {
        if (jj_2_4(3)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(MUL);
        Factor();
      }
    } catch (Exception e) {
    if (e.getMessage().contains("Wrong")) {
      {if (true) throw e;}
    }

    //extract line number from Exception
    int lineNumber = getLineNumber(e.getMessage());

    //throw new excpetion with a custom message
    {if (true) throw new Exception(lineNumber+"\nWrong Expression Format");}
    }
  }

//FACTOR -> NUM | Function | Parameter
//add check to make sure function calls refer to defined functions in the same file
  final public void Factor() throws ParseException, Exception {
                                 Token t;
    try {
      if (jj_2_5(3)) {
        Function_Call();
      } else if (jj_2_6(3)) {
        t = jj_consume_token(PARAM);
      if (!(functionParams.peek().equals(t.image))) {
        {if (true) throw new Exception(t.beginLine+"\nWrong Parameter within function body");}
      }
      } else if (jj_2_7(3)) {
        jj_consume_token(NUM);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Exception e) {
    if (e.getMessage().contains("Wrong"))
      {if (true) throw e;}
    else {
      //extract line number from Exception
      int lineNumber = getLineNumber(e.getMessage());

      //throw new excpetion with a custom message
      {if (true) throw new Exception(lineNumber+"\nWrong Expression Format");}
    }
    }
  }

//Function_Call -> FUNC LPAREN EXPR RPAREN
  final public void Function_Call() throws ParseException, Exception {
                                        Token t;
    try {
      t = jj_consume_token(FUNC);
      //add line number and function call to arraylist of function calls
      functionCalls.add(t.beginLine + " " + t.image);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
    } catch (Exception e) {
                          //catch error thrown for incorrect function call Format
    if (e.getMessage().contains("Wrong")) {
      {if (true) throw e;}
    }

    //extract line number from Exception
    int lineNumber = getLineNumber(e.getMessage());

    //throw new excpetion with a custom message
    {if (true) throw new Exception(lineNumber+"\nWrong Function Call Format");}
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_3_1() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(MUL)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_3R_9()) return true;
    if (jj_scan_token(FUNC)) return true;
    if (jj_scan_token(SPACE)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(PARAM)) return true;
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_3R_7()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(DEFINE)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_scan_token(FUNC)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(ADD)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public AssignmentTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[7];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Assignment(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Assignment(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AssignmentTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Assignment(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AssignmentTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Assignment(AssignmentTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AssignmentTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[16];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 16; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
